// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/main.proto

package infosvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfoSvc_WhatIsGithub_FullMethodName = "/info.InfoSvc/WhatIsGithub"
	InfoSvc_WhoAmI_FullMethodName       = "/info.InfoSvc/WhoAmI"
)

// InfoSvcClient is the client API for InfoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoSvcClient interface {
	WhatIsGithub(ctx context.Context, in *WhatIsGithubRequest, opts ...grpc.CallOption) (*WhatIsGithubResponse, error)
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
}

type infoSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoSvcClient(cc grpc.ClientConnInterface) InfoSvcClient {
	return &infoSvcClient{cc}
}

func (c *infoSvcClient) WhatIsGithub(ctx context.Context, in *WhatIsGithubRequest, opts ...grpc.CallOption) (*WhatIsGithubResponse, error) {
	out := new(WhatIsGithubResponse)
	err := c.cc.Invoke(ctx, InfoSvc_WhatIsGithub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoSvcClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, InfoSvc_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoSvcServer is the server API for InfoSvc service.
// All implementations must embed UnimplementedInfoSvcServer
// for forward compatibility
type InfoSvcServer interface {
	WhatIsGithub(context.Context, *WhatIsGithubRequest) (*WhatIsGithubResponse, error)
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	mustEmbedUnimplementedInfoSvcServer()
}

// UnimplementedInfoSvcServer must be embedded to have forward compatible implementations.
type UnimplementedInfoSvcServer struct {
}

func (UnimplementedInfoSvcServer) WhatIsGithub(context.Context, *WhatIsGithubRequest) (*WhatIsGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatIsGithub not implemented")
}
func (UnimplementedInfoSvcServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedInfoSvcServer) mustEmbedUnimplementedInfoSvcServer() {}

// UnsafeInfoSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoSvcServer will
// result in compilation errors.
type UnsafeInfoSvcServer interface {
	mustEmbedUnimplementedInfoSvcServer()
}

func RegisterInfoSvcServer(s grpc.ServiceRegistrar, srv InfoSvcServer) {
	s.RegisterService(&InfoSvc_ServiceDesc, srv)
}

func _InfoSvc_WhatIsGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatIsGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoSvcServer).WhatIsGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoSvc_WhatIsGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoSvcServer).WhatIsGithub(ctx, req.(*WhatIsGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoSvc_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoSvcServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoSvc_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoSvcServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoSvc_ServiceDesc is the grpc.ServiceDesc for InfoSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.InfoSvc",
	HandlerType: (*InfoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhatIsGithub",
			Handler:    _InfoSvc_WhatIsGithub_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _InfoSvc_WhoAmI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}
